diff --git a/dmenu.c b/dmenu.c
index 40f93e0..62374b7 100644
--- a/dmenu.c
+++ b/dmenu.c
@@ -35,7 +35,7 @@ struct item {
 
 static char text[BUFSIZ] = "";
 static char *embed;
-static int bh, mw, mh;
+static int bh;
 static int inputw = 0, promptw;
 static int lrpad; /* sum of left and right padding */
 static size_t cursor;
@@ -44,6 +44,11 @@ static struct item *matches, *matchend;
 static struct item *prev, *curr, *next, *sel;
 static int mon = -1, screen;
 
+static int dmenu_x = 0;
+static int dmenu_y = 0;
+static int dmenu_w = 0;
+static int dmenu_h = 0;
+
 static Atom clip, utf8;
 static Display *dpy;
 static Window root, parentwin, win;
@@ -85,7 +90,7 @@ calcoffsets(void)
 	if (lines > 0)
 		n = lines * bh;
 	else
-		n = mw - (promptw + inputw + TEXTW("<") + TEXTW(">"));
+		n = dmenu_w - (promptw + inputw + TEXTW("<") + TEXTW(">"));
 	/* calculate which items will begin the next page and previous page */
 	for (i = 0, next = curr; next; next = next->right)
 		if ((i += (lines > 0) ? bh : textw_clamp(next->text, n)) > n)
@@ -150,45 +155,45 @@ drawmenu(void)
 	int x = 0, y = 0, w;
 
 	drw_setscheme(drw, scheme[SchemeNorm]);
-	drw_rect(drw, 0, 0, mw, mh, 1, 1);
+	drw_rect(drw, x, y, dmenu_w, dmenu_h, 1, 1);
 
 	if (prompt && *prompt) {
 		drw_setscheme(drw, scheme[SchemeSel]);
 		x = drw_text(drw, x, 0, promptw, bh, lrpad / 2, prompt, 0);
 	}
 	/* draw input field */
-	w = (lines > 0 || !matches) ? mw - x : inputw;
+	w = (lines > 0 || !matches) ? dmenu_w - x : inputw;
 	drw_setscheme(drw, scheme[SchemeNorm]);
-	drw_text(drw, x, 0, w, bh, lrpad / 2, text, 0);
+	drw_text(drw, dmenu_x, y, w, bh, lrpad / 2, text, 0);
 
 	curpos = TEXTW(text) - TEXTW(&text[cursor]);
 	if ((curpos += lrpad / 2 - 1) < w) {
 		drw_setscheme(drw, scheme[SchemeNorm]);
-		drw_rect(drw, x + curpos, 2, 2, bh - 4, 1, 0);
+		drw_rect(drw, x, 2, 2, bh - 4, 1, 0);
 	}
 
 	if (lines > 0) {
 		/* draw vertical list */
 		for (item = curr; item != next; item = item->right)
-			drawitem(item, x, y += bh, mw - x);
+			drawitem(item, x, y += bh, dmenu_w - x);
 	} else if (matches) {
 		/* draw horizontal list */
 		x += inputw;
 		w = TEXTW("<");
 		if (curr->left) {
 			drw_setscheme(drw, scheme[SchemeNorm]);
-			drw_text(drw, x, 0, w, bh, lrpad / 2, "<", 0);
+			drw_text(drw, x, y, w, bh, lrpad / 2, "<", 0);
 		}
 		x += w;
 		for (item = curr; item != next; item = item->right)
-			x = drawitem(item, x, 0, textw_clamp(item->text, mw - x - TEXTW(">")));
+			x = drawitem(item, x, y, textw_clamp(item->text, dmenu_w - x - TEXTW(">")));
 		if (next) {
 			w = TEXTW(">");
 			drw_setscheme(drw, scheme[SchemeNorm]);
-			drw_text(drw, mw - w, 0, w, bh, lrpad / 2, ">", 0);
+			drw_text(drw, dmenu_w - w, y, w, bh, lrpad / 2, ">", 0);
 		}
 	}
-	drw_map(drw, win, 0, 0, mw, mh);
+	drw_map(drw, win, 0, 0, dmenu_w, dmenu_h);
 }
 
 static void
@@ -588,7 +593,7 @@ run(void)
 			exit(1);
 		case Expose:
 			if (ev.xexpose.count == 0)
-				drw_map(drw, win, 0, 0, mw, mh);
+				drw_map(drw, win, 0, 0, dmenu_w, dmenu_h);
 			break;
 		case FocusIn:
 			/* regrab focus from parent window */
@@ -613,7 +618,7 @@ run(void)
 static void
 setup(void)
 {
-	int x, y, i, j;
+        int i, j, x, y;
 	unsigned int du;
 	XSetWindowAttributes swa;
 	XIM xim;
@@ -635,7 +640,7 @@ setup(void)
 	/* calculate menu geometry */
 	bh = drw->fonts->h + 2;
 	lines = MAX(lines, 0);
-	mh = (lines + 1) * bh;
+        dmenu_h = dmenu_h ? dmenu_h : (lines + 1) * bh;
 #ifdef XINERAMA
 	i = 0;
 	if (parentwin == root && (info = XineramaQueryScreens(dpy, &n))) {
@@ -662,9 +667,7 @@ setup(void)
 				if (INTERSECT(x, y, 1, 1, info[i]) != 0)
 					break;
 
-		x = info[i].x_org;
-		y = info[i].y_org + (topbar ? 0 : info[i].height - mh);
-		mw = info[i].width;
+		dmenu_w = dmenu_w ? dmenu_w : info[i].width;
 		XFree(info);
 	} else
 #endif
@@ -672,19 +675,19 @@ setup(void)
 		if (!XGetWindowAttributes(dpy, parentwin, &wa))
 			die("could not get embedding window attributes: 0x%lx",
 			    parentwin);
-		x = 0;
-		y = topbar ? 0 : wa.height - mh;
-		mw = wa.width;
+                dmenu_x = dmenu_x ? dmenu_x : 0;
+                dmenu_y = dmenu_y ? dmenu_y : 0;
+		dmenu_w = dmenu_w ? dmenu_w : wa.width;
 	}
 	promptw = (prompt && *prompt) ? TEXTW(prompt) - lrpad / 4 : 0;
-	inputw = mw / 3; /* input width: ~33% of monitor width */
+	inputw = dmenu_w / 3; /* input width: ~33% of monitor width */
 	match();
 
 	/* create menu window */
 	swa.override_redirect = True;
 	swa.background_pixel = scheme[SchemeNorm][ColBg].pixel;
 	swa.event_mask = ExposureMask | KeyPressMask | VisibilityChangeMask;
-	win = XCreateWindow(dpy, root, x, y, mw, mh, 0,
+	win = XCreateWindow(dpy, root, dmenu_x, dmenu_y, dmenu_w, dmenu_h, 0,
 	                    CopyFromParent, CopyFromParent, CopyFromParent,
 	                    CWOverrideRedirect | CWBackPixel | CWEventMask, &swa);
 	XSetClassHint(dpy, win, &ch);
@@ -699,7 +702,7 @@ setup(void)
 
 	XMapRaised(dpy, win);
 	if (embed) {
-		XReparentWindow(dpy, win, parentwin, x, y);
+                XReparentWindow(dpy, win, parentwin, dmenu_x, dmenu_y);
 		XSelectInput(dpy, parentwin, FocusChangeMask | SubstructureNotifyMask);
 		if (XQueryTree(dpy, parentwin, &dw, &w, &dws, &du) && dws) {
 			for (i = 0; i < du && dws[i] != win; ++i)
@@ -708,7 +711,7 @@ setup(void)
 		}
 		grabfocus();
 	}
-	drw_resize(drw, mw, mh);
+	drw_resize(drw, dmenu_w, dmenu_h);
 	drawmenu();
 }
 
@@ -716,7 +719,8 @@ static void
 usage(void)
 {
 	die("usage: dmenu [-bfiv] [-l lines] [-p prompt] [-fn font] [-m monitor]\n"
-	    "             [-nb color] [-nf color] [-sb color] [-sf color] [-w windowid]");
+	    "             [-nb color] [-nf color] [-sb color] [-sf color] [-w windowid]\n"
+            "             [-x x coordinate] [-y y coordinate] [-idw width] [-h height]");
 }
 
 int
@@ -756,8 +760,16 @@ main(int argc, char *argv[])
 			colors[SchemeSel][ColBg] = argv[++i];
 		else if (!strcmp(argv[i], "-sf"))  /* selected foreground color */
 			colors[SchemeSel][ColFg] = argv[++i];
-		else if (!strcmp(argv[i], "-w"))   /* embedding window id */
+		else if (!strcmp(argv[i], "-idw"))   /* embedding window id */
 			embed = argv[++i];
+		else if (!strcmp(argv[i], "-x"))   /* selected x coordinate */
+                        dmenu_x = atoi(argv[++i]);
+		else if (!strcmp(argv[i], "-y"))   /* selected y coordinate */
+                        dmenu_y = atoi(argv[++i]);
+		else if (!strcmp(argv[i], "-w"))   /* selected width */
+                        dmenu_w = atoi(argv[++i]);
+		else if (!strcmp(argv[i], "-h"))   /* selected height */
+                        dmenu_h = atoi(argv[++i]);
 		else
 			usage();
 
